js test note

參考連結：https://wcc723.github.io/development/2020/02/02/jest-intro/
首先進到資料夾，然後做npm init
    command line:
        npm init -y

接著會發現因為你init現在的專案了所以他會產生一個package.json的檔案我們等下會用這個檔案去跑script

安裝jest
    command line:
        npm i --save-dev jest

會看到熟悉的node_modules檔案，也會產生package-lock.json
這樣就已經做好package version控制了
原本的package.json的code是長這樣
code:
{
  "name": "jstest",
  "version": "1.0.0",
  "description": "",
  "main": "cloneArray.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {},
  "devDependencies": {
    "jest": "^24.9.0"
  }
}

現在我們要把它改一下
code:
{
  "name": "jstest",
  "version": "1.0.0",
  "description": "",
  "main": "cloneArray.js",
  "scripts": {
    "test": "jest"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {},
  "devDependencies": {
    "jest": "^24.9.0"
  }
}

這樣就可以跑測試了，接著跑第一次我們看一下

接著如果我們要跑什麼的測試的話
我們就把黨名命名為：檔名.test.js這樣就可以了
這裡會有兩段
一段是對一班的測試我們先看一下
首先我們先見sum.test.js
code:
const sum = require('./sum');

test('properly adds two numbers', () => {
    expect(
        sum(1, 2)
    ).toBe(3);
});

打完以後再打一次npm test接著他就會去跑測試了
我們會看到passed字樣就代表我們已經測完了


後面我們來建立我們的cloneArray.js的測試
一樣建立cloneArray.test.js檔案
code:
const cloneArray = require('./cloneArray');

test('properly clones array', () => {
    const array = [1, 2, 3];
    expect(
        cloneArray(array)
    ).toBe(
        array
    );
});
這個時候他會報錯，說我們用來比對的方法錯誤因為他是array
我們要換一個方法所以我們調一下code:
const cloneArray = require('./cloneArray');

test('properly clones array', () => {
    const array = [1, 2, 3];
    expect(
        cloneArray(array)
    ).toStrictEqual(
        array
    );
});

這裡的test case它提供了另一種東西
code:
expect(cloneArray(array)).toEqual(array);
expect(cloneArray(array)).not.toBe(array);
感覺這樣的寫法是因為當初在弄測試時候沒有考慮到怎麼處理array所以硬擠的做法

這樣的意思是我們要比較嚴格的去比對一定要一樣像是型別或者格式等等的
但是印象中沒辦法去做比對的應該是object

如果只是想知道有沒有測過的話package.json只要寫test的命令就好如果要知道coverage的話就要在command上加工了
code:
"test": "jest --coverage"
這樣就可以看到完整的coverage了
現在看起來應該會是100%的狀態

我們回到我們的sum.js裡面我們加上一支新的function
code:
function sum(a, b) {
    return a + b;
};

function helper() {
    console.log('helper');
}

module.exports = sum;
再跑一次npm test接下來你會到我們的coverage變成66.67
點開測試報告還可以看到到底是哪隻檔案的覆蓋率太低
然後可以在自己模擬如果改了code以後測試報告會長怎樣
然後現在做的是單元測試就是把東西拆的小小的這樣測


參考連結：https://ithelp.ithome.com.tw/articles/10238581

1.
在 /js/ 裏面建一隻新的檔案 calculation_og.js
然後把 code 放上去
`
  const sum = (a, b) => a - b // 有 bug

  const result = sum(8, 7)

  const expected = 15
  if (result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }
`

使用 node 去讀它
folder:     cd /Users/terry.yao/project/jest
command:    node js/calculation_og.js
result:     
  /Users/terry.yao/project/jest/js/calculation.js:7
        throw new Error(`${result} is not equal to ${expected}`)
        ^

  Error: 1 is not equal to 15
      at Object.<anonymous> (/Users/terry.yao/project/jest/js/calculation.js:7:8)
      at Module._compile (internal/modules/cjs/loader.js:1158:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
      at Module.load (internal/modules/cjs/loader.js:1002:32)
      at Function.Module._load (internal/modules/cjs/loader.js:901:14)
      at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
      at internal/main/run_main_module.js:18:47

這樣就完成最基本的測試狀態了

把本來的 calculation_og.js 複製一下改名 calculation_fix.js
然後把 code 改成下面這樣
`
  const sum = (a, b) => a + b
  const subtract = (a, b) => a - b

  let result = sum(8, 7)
  let expected = 15
  if (result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }

  result = subtract(8, 7)
  expected = 1
  if (result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }
`

我們本來有 bug 的 - 改成 +
再加上正常來講的 - 的邏輯

然後再用 node 再去讀它一次
folder:     cd /Users/terry.yao/project/jest
command:    node js/calculation_fix.js
result:     

會完全沒有反應
因為你沒有錯的地方所以他沒有理你


現在再跑一次把測試邏輯抽出來
但是把剛剛 calculation 改回正常的 .js 檔案
但是我們把下面的測試邏輯抽走
然後再把現在的 code 做 module exports
讓他 sum 一樣 + 打成 - 這樣等下才能看測試的成果

calculation.js
`
  const sum = (a, b) => a - b // 有 bug
  const subtract = (a, b) => a - b

  module.exports = {
    sum,
    subtract,
  }
`

assertion.js
`
  const { sum, subtract } = require('./calculation')

  let result, expected

  result = sum(8, 7)
  expected = 15
  if (result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }

  result = subtract(8, 7)
  expected = 1
  if (result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }
`

然後再用 node 再去讀它一次
folder:     cd /Users/terry.yao/project/jest
command:    node js/assertion.js
result:     
  /Users/terry.yao/project/jest/js/assertion.js:25
        throw new Error(`${result} is not equal to ${expected}`)
        ^

  Error: 1 is not equal to 15
      at Object.toBe (/Users/terry.yao/project/jest/js/assertion.js:25:15)
      at Object.<anonymous> (/Users/terry.yao/project/jest/js/assertion.js:19:16)
      at Module._compile (internal/modules/cjs/loader.js:1158:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
      at Module.load (internal/modules/cjs/loader.js:1002:32)
      at Function.Module._load (internal/modules/cjs/loader.js:901:14)
      at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
      at internal/main/run_main_module.js:18:47

現在來建立一個 framework.js 
code:
`
function test(title, callback) {
  try {
    callback()
    console.log(`✅ ${title}`)
  } catch (error) {
    console.error(`❌ ${title}`)
    console.error(error)
  }
};

module.exports = {
  test,
}
`

這裡是處理跳出訊息，讓錯誤訊息更清楚一點

然後 assertion.js 裏面引用 test function
code:
`
const { sum, subtract } = require('./calculation');
const { test } = require('./framework');

function expect(result) {
  return {
    toBe(expected) {
      if (result !== expected) {
        throw new Error(`${result} is not equal to ${expected}`)
      }
    },
  }
}


test('add numbers', () => {
  const result = sum(8, 7)
  const expected = 15
  expect(result).toBe(expected)
})

test('subtract numbers', () => {
  const result = subtract(8, 7)
  const expected = 1
  expect(result).toBe(expected)
})




module.exports = {
  expect,
}
`

然後再次使用 node 去測 assertion.js
folder:     cd /Users/terry.yao/project/jest
command:    node js/assertion.js
result:     
  ❌ add numbers
  Error: 1 is not equal to 15
      at Object.toBe (/Users/terry.yao/project/jest/js/assertion.js:26:15)
      at /Users/terry.yao/project/jest/js/assertion.js:36:18
      at test (/Users/terry.yao/project/jest/js/framework.js:3:5)
      at Object.<anonymous> (/Users/terry.yao/project/jest/js/assertion.js:33:1)
      at Module._compile (internal/modules/cjs/loader.js:1158:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
      at Module.load (internal/modules/cjs/loader.js:1002:32)
      at Function.Module._load (internal/modules/cjs/loader.js:901:14)
      at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
      at internal/main/run_main_module.js:18:47
  ✅ subtract numbers


接著準備來測試非同步
單純想做非同步的話一開始的思路一定是想說把 test function 改成 async/await 這樣
assertion.js
code:
`
const { sum, subtract } = require('./calculation');
const { test } = require('./framework');

function expect(result) {
  return {
    toBe(expected) {
      if (result !== expected) {
        throw new Error(`${result} is not equal to ${expected}`)
      }
    },
  }
}

test('add numbers', async () => {
  const result = await sum(8, 7)
  const expected = 15
  expect(result).toBe(expected)
})
test('subtract numbers', async () => {
  const result = await subtract(8, 7)
  const expected = 1
  expect(result).toBe(expected)
})

module.exports = {
  expect,
}
`

接著再跑一次 command
folder:     cd /Users/terry.yao/project/jest
command:    node js/assertion.js
result:     
✅ add numbers
✅ subtract numbers
(node:14095) UnhandledPromiseRejectionWarning: ReferenceError: sumAsync is not defined
    at /Users/terry.yao/project/jest/js/assertion.js:34:18
    at test (/Users/terry.yao/project/jest/js/framework.js:3:5)
    at Object.<anonymous> (/Users/terry.yao/project/jest/js/assertion.js:33:1)
    at Module._compile (internal/modules/cjs/loader.js:1158:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
    at Module.load (internal/modules/cjs/loader.js:1002:32)
    at Function.Module._load (internal/modules/cjs/loader.js:901:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
    at internal/main/run_main_module.js:18:47
(node:14095) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)
(node:14095) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
(node:14095) UnhandledPromiseRejectionWarning: ReferenceError: subtractAsync is not defined
    at /Users/terry.yao/project/jest/js/assertion.js:39:18
    at test (/Users/terry.yao/project/jest/js/framework.js:3:5)
    at Object.<anonymous> (/Users/terry.yao/project/jest/js/assertion.js:38:1)
    at Module._compile (internal/modules/cjs/loader.js:1158:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
    at Module.load (internal/modules/cjs/loader.js:1002:32)
    at Function.Module._load (internal/modules/cjs/loader.js:901:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
    at internal/main/run_main_module.js:18:47
(node:14095) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 2)

執行以後發現怎麼可能變成會過？
還有一個奇怪的錯誤 UnhandledPromiseRejectionWarning
看起來是針對沒有處理 promise 的各種狀態
所以 test function 也改成 async function 然後 await function 改成 callback function
framework.js
code:
`
async function test(title, callback) {
  try {
    await callback()
    console.log(`✅ ${title}`)
  } catch (error) {
    console.error(`❌ ${title}`)
    console.error(error)
  }
}

module.exports = {
  test,
}
`

再跑一次 command
folder:     cd /Users/terry.yao/project/jest
command:    node js/assertion.js
result:     
  ❌ add numbers
  Error: 1 is not equal to 15
      at Object.toBe (/Users/terry.yao/project/jest/js/assertion.js:26:15)
      at /Users/terry.yao/project/jest/js/assertion.js:48:18
      at async test (/Users/terry.yao/project/jest/js/framework.js:3:5)
  ✅ subtract numbers

回頭把 assertion.js 裏面同事兼顧同步非同步一起跑看看
code:
`
const { sum, subtract } = require('./calculation');
const { test } = require('./framework');

function expect(result) {
  return {
    toBe(expected) {
      if (result !== expected) {
        throw new Error(`${result} is not equal to ${expected}`)
      }
    },
  }
}

// 同步區
test('同步區 add numbers', () => {
  const result = sum(8, 7)
  const expected = 15
  expect(result).toBe(expected)
})

test('同步區 subtract numbers', () => {
  const result = subtract(8, 7)
  const expected = 1
  expect(result).toBe(expected)
})

// 非同步區
test('非同步區 add numbers', async () => {
  const result = await sum(8, 7)
  const expected = 15
  expect(result).toBe(expected)
})
test('非同步區 subtract numbers', async () => {
  const result = await subtract(8, 7)
  const expected = 1
  expect(result).toBe(expected)
})

module.exports = {
  expect,
}
`

folder:     cd /Users/terry.yao/project/jest
command:    node js/assertion.js
result:     
  ❌ 同步區 add numbers
  Error: 1 is not equal to 15
      at Object.toBe (/Users/terry.yao/project/jest/js/assertion.js:26:15)
      at /Users/terry.yao/project/jest/js/assertion.js:36:18
      at test (/Users/terry.yao/project/jest/js/framework.js:3:11)
      at Object.<anonymous> (/Users/terry.yao/project/jest/js/assertion.js:33:1)
      at Module._compile (internal/modules/cjs/loader.js:1158:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
      at Module.load (internal/modules/cjs/loader.js:1002:32)
      at Function.Module._load (internal/modules/cjs/loader.js:901:14)
      at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
      at internal/main/run_main_module.js:18:47
  ✅ 同步區 subtract numbers
  ❌ 非同步區 add numbers
  Error: 1 is not equal to 15
      at Object.toBe (/Users/terry.yao/project/jest/js/assertion.js:26:15)
      at /Users/terry.yao/project/jest/js/assertion.js:49:18
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async test (/Users/terry.yao/project/jest/js/framework.js:3:5)
  ✅ 非同步區 subtract numbers

看起來好像有點像樣

現在看起來要補的只有讓這個 framework.js 做成 global 使用的檔案
舊的檔案我們都先不處理
開一個新的 global-framework.js 把 test function 跟 expect function 放進去
code:
`
async function test(title, callback) {
  try {
    await callback();
    console.log(`✅ ${title}`);
  } catch (error) {
    console.error(`❌ ${title}`);
    console.error(error);
  }
}

function expect(result) {
  return {
    toBe(expected) {
      if (result !== expected) {
        throw new Error(`${result} is not equal to ${expected}`);
      }
    },
  };
}

global.test = test;
global.expect = expect;
`

然後建立一支 global-assertion.js 檔案
code:
`
const { sum, subtract, sumAsync, subtractAsync } = require('./calculation')

test('add numbers', () => {
  const result = sum(8, 7);
  const expected = 15;
  expect(result).toBe(expected);
});
test('subtract numbers', () => {
  const result = subtract(8, 7);
  const expected = 1;
  expect(result).toBe(expected);
});
test('add numbers async', async () => {
  const result = await sumAsync(8, 7);
  const expected = 15;
  expect(result).toBe(expected);
});
test('subtract numbers async', async () => {
  const result = await subtractAsync(8, 7);
  const expected = 1;
  expect(result).toBe(expected);
});
`

接著就可以繼續使用測試了
folder:     cd /Users/terry.yao/project/jest
command:    node --require ./js/global-framework.js ./js/global-assertion.js 
result:     
  ❌ add numbers
  Error: 1 is not equal to 15
      at Object.toBe (/Users/terry.yao/project/jest/js/global-framework.js:15:15)
      at /Users/terry.yao/project/jest/js/global-assertion.js:6:18
      at test (/Users/terry.yao/project/jest/js/global-framework.js:3:11)
      at Object.<anonymous> (/Users/terry.yao/project/jest/js/global-assertion.js:3:1)
      at Module._compile (internal/modules/cjs/loader.js:1158:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
      at Module.load (internal/modules/cjs/loader.js:1002:32)
      at Function.Module._load (internal/modules/cjs/loader.js:901:14)
      at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
      at internal/main/run_main_module.js:18:47
  ✅ subtract numbers
  ❌ add numbers async
  TypeError: sumAsync is not a function
      at /Users/terry.yao/project/jest/js/global-assertion.js:14:24
      at test (/Users/terry.yao/project/jest/js/global-framework.js:3:11)
      at Object.<anonymous> (/Users/terry.yao/project/jest/js/global-assertion.js:13:1)
      at Module._compile (internal/modules/cjs/loader.js:1158:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
      at Module.load (internal/modules/cjs/loader.js:1002:32)
      at Function.Module._load (internal/modules/cjs/loader.js:901:14)
      at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
      at internal/main/run_main_module.js:18:47
  ❌ subtract numbers async
  TypeError: subtractAsync is not a function
      at /Users/terry.yao/project/jest/js/global-assertion.js:19:24
      at test (/Users/terry.yao/project/jest/js/global-framework.js:3:11)
      at Object.<anonymous> (/Users/terry.yao/project/jest/js/global-assertion.js:18:1)
      at Module._compile (internal/modules/cjs/loader.js:1158:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
      at Module.load (internal/modules/cjs/loader.js:1002:32)
      at Function.Module._load (internal/modules/cjs/loader.js:901:14)
      at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
      at internal/main/run_main_module.js:18:47


### node 後面加上 --require 是指在執行之前預先載入特定 module，這裡指的是載入 global-framework.js

上面這些就做完簡易的測試初始模組了


如果我們照著上面那篇寫得繼續往下走
他會叫我們輸入 command: npx jest
但是輸入以後我們會因為之前有寫的 .test.js 檔案被讀取
看起來根本不知道發生什麼事情

接著參考這篇
https://titangene.github.io/article/jest-build-test-env.html
看一下 jest 有沒有什麼設定我沒有設定到
然後設定 jest 初始化 command: npx jest --init
folder:     cd /Users/terry.yao/project/jest
command:    npx jest --init
result:     
  The following questions will help Jest to create a suitable configuration for your project

  ✔ Would you like to use Jest when running "test" script in "package.json"? … yes
  ✔ Choose the test environment that will be used for testing › node
  ✔ Do you want Jest to add coverage reports? … yes
  ✔ Automatically clear mock calls and instances between every test? … yes

  ✏️  Modified /Users/terry.yao/project/jest/package.json

  📝  Configuration file created at /Users/terry.yao/project/jest/jest.config.js

這樣就把 jest.config.js 建出來了

好的然後在他的 day 2 最下面是建立一個 jest.test.js 檔案，裡面放的是 global-assertion.js 裏面的 code
然後準備用 jest 去跑
因為我們現在裏面已經有很多 test 檔案了所以等下會針對 command 做一些調整
然後 code 的部分也會調整一些東西
global-assertion.js 裏面的 sumAsync/subtractAsync 的 function 根本不存在
所以我們把它改成原本的 sum, subtract
code:
`
const { sum, subtract } = require('./calculation')

test('add numbers', () => {
  const result = sum(8, 7);
  const expected = 15;
  expect(result).toBe(expected);
});
test('subtract numbers', () => {
  const result = subtract(8, 7);
  const expected = 1;
  expect(result).toBe(expected);
});
test('add numbers async', async () => {
  const result = await sum(8, 7);
  const expected = 15;
  expect(result).toBe(expected);
});
test('subtract numbers async', async () => {
  const result = await subtract(8, 7);
  const expected = 1;
  expect(result).toBe(expected);
});
`

然後剛剛建好的 jest.test.js
code:
`
const { sum, subtract } = require('./calculation')

test('add numbers', () => {
  const result = sum(8, 7);
  const expected = 15;
  expect(result).toBe(expected);
});
test('subtract numbers', () => {
  const result = subtract(8, 7);
  const expected = 1;
  expect(result).toBe(expected);
});
test('add numbers async', async () => {
  const result = await sum(8, 7);
  const expected = 15;
  expect(result).toBe(expected);
});
test('subtract numbers async', async () => {
  const result = await subtract(8, 7);
  const expected = 1;
  expect(result).toBe(expected);
});
`

如果沒有改成這樣的話我們用 jest 去跑的話
folder:     cd /Users/terry.yao/project/jest
command:    npm run test ./js/jest.test.js
result:     
  > jstest@1.0.0 test /Users/terry.yao/project/jest
  > jest "./js/jest.test.js"

  FAIL  js/jest.test.js
    ✕ add numbers (5ms)
    ✓ subtract numbers
    ✕ add numbers async (1ms)
    ✕ subtract numbers async

    ● add numbers

      expect(received).toBe(expected) // Object.is equality

      Expected: 15
      Received: 1

        4 |   const result = sum(8, 7);
        5 |   const expected = 15;
      > 6 |   expect(result).toBe(expected);
          |                  ^
        7 | });
        8 | test('subtract numbers', () => {
        9 |   const result = subtract(8, 7);

        at Object.<anonymous> (js/jest.test.js:6:18)

    ● add numbers async

      TypeError: sumAsync is not a function

        12 | });
        13 | test('add numbers async', async () => {
      > 14 |   const result = await sumAsync(8, 7);
          |                        ^
        15 |   const expected = 15;
        16 |   expect(result).toBe(expected);
        17 | });

        at Object.<anonymous> (js/jest.test.js:14:24)

    ● subtract numbers async

      TypeError: subtractAsync is not a function

        17 | });
        18 | test('subtract numbers async', async () => {
      > 19 |   const result = await subtractAsync(8, 7);
          |                        ^
        20 |   const expected = 1;
        21 |   expect(result).toBe(expected);

快速翻譯的意思就是那個方法不存在

改過之後再跑一次
folder:     cd /Users/terry.yao/project/jest
command:    npm run test ./js/jest.test.js
result:     
  > jstest@1.0.0 test /Users/terry.yao/project/jest
  > jest "./js/jest.test.js"

  FAIL  js/jest.test.js
    ✕ add numbers (4ms)
    ✓ subtract numbers
    ✕ add numbers async
    ✓ subtract numbers async

    ● add numbers

      expect(received).toBe(expected) // Object.is equality

      Expected: 15
      Received: 1

        4 |   const result = sum(8, 7);
        5 |   const expected = 15;
      > 6 |   expect(result).toBe(expected);
          |                  ^
        7 | });
        8 | test('subtract numbers', () => {
        9 |   const result = subtract(8, 7);

        at Object.<anonymous> (js/jest.test.js:6:18)

    ● add numbers async

      expect(received).toBe(expected) // Object.is equality

      Expected: 15
      Received: 1

        14 |   const result = await sum(8, 7);
        15 |   const expected = 15;
      > 16 |   expect(result).toBe(expected);
          |                  ^
        17 | });
        18 | test('subtract numbers async', async () => {
        19 |   const result = await subtract(8, 7);

        at Object.<anonymous> (js/jest.test.js:16:18)

  Test Suites: 1 failed, 1 total
  Tests:       2 failed, 2 passed, 4 total
  Snapshots:   0 total
  Time:        0.551s, estimated 1s
  Ran all test suites matching /.\/js\/jest.test.js/i.
  npm ERR! code ELIFECYCLE
  npm ERR! errno 1
  npm ERR! jstest@1.0.0 test: `jest "./js/jest.test.js"`
  npm ERR! Exit status 1
  npm ERR! 
  npm ERR! Failed at the jstest@1.0.0 test script.
  npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

  npm ERR! A complete log of this run can be found in:
  npm ERR!     /Users/terry.yao/.npm/_logs/2021-08-29T03_20_21_345Z-debug.log

基本上這樣跟我們本來預期的測試結果也比較接近